import{_ as a,c as l,ae as e,o as s}from"./chunks/framework.BzDBnRMZ.js";const c=JSON.parse('{"title":"Vue3 源码解析准备工作","description":"","frontmatter":{},"headers":[],"relativePath":"docs/vue3/准备工作.md","filePath":"docs/vue3/准备工作.md"}'),t={name:"docs/vue3/准备工作.md"};function o(n,i,r,h,p,d){return s(),l("div",null,i[0]||(i[0]=[e(`<h1 id="vue3-源码解析准备工作" tabindex="-1">Vue3 源码解析准备工作 <a class="header-anchor" href="#vue3-源码解析准备工作" aria-label="Permalink to &quot;Vue3 源码解析准备工作&quot;">​</a></h1><h2 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-label="Permalink to &quot;学习目标&quot;">​</a></h2><ul><li>详解 Vue3 设计理念及整体架构思想，搭建 Vue3 开发环境。</li><li>手写 Vue3 响应式原理，包括 reactive、effect、watch、computed、ref 等核心 API。</li><li>掌握 Vue3 源码调试技巧，深入理解 Vue3 的内部机制。</li><li>深入理解自定义渲染器原理及在 Runtime DOM 中的属性和事件处理方法。</li><li>探索虚拟 DOM 的概念，手写 Vue3 中的 diff 算法以及最长递增子序列实现原理。</li><li>手写 Vue3 组件的实现原理，深入理解组件的渲染、挂载流程，以及异步渲染的机制。</li><li>掌握 Vue3 中生命周期的原理，以及 props、emit、slot、provide、inject 等功能的实现机制。</li><li>学习编译优化技巧，掌握 patchFlags、blockTree 等实现靶向更新的方法。</li><li>手写 Vue3 编译原理，掌握解析器、AST 语法树的优化、代码生成原理。</li><li>理解 Vue3 中的异步组件、函数式组件、Teleport、keep-alive、Transition 组件的实现原理。</li></ul><h2 id="vue3-核心设计理念" tabindex="-1">Vue3 核心设计理念 <a class="header-anchor" href="#vue3-核心设计理念" aria-label="Permalink to &quot;Vue3 核心设计理念&quot;">​</a></h2><h3 id="_1-性能优化" tabindex="-1">1. 性能优化 <a class="header-anchor" href="#_1-性能优化" aria-label="Permalink to &quot;1. 性能优化&quot;">​</a></h3><h4 id="_1-1-响应式系统重写" tabindex="-1">1.1 响应式系统重写 <a class="header-anchor" href="#_1-1-响应式系统重写" aria-label="Permalink to &quot;1.1 响应式系统重写&quot;">​</a></h4><ul><li>使用 Proxy 替代 Object.defineProperty</li><li>提供更完整的响应式覆盖</li></ul><h4 id="_1-2-编译优化" tabindex="-1">1.2 编译优化 <a class="header-anchor" href="#_1-2-编译优化" aria-label="Permalink to &quot;1.2 编译优化&quot;">​</a></h4><h5 id="block-tree-机制" tabindex="-1">Block Tree 机制 <a class="header-anchor" href="#block-tree-机制" aria-label="Permalink to &quot;Block Tree 机制&quot;">​</a></h5><ul><li>基于动态节点分块优化</li><li>固定块内部节点结构</li><li>只追踪动态节点</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;静态标题&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 动态节点 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;静态文本&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h5 id="静态提升" tabindex="-1">静态提升 <a class="header-anchor" href="#静态提升" aria-label="Permalink to &quot;静态提升&quot;">​</a></h5><ul><li>静态节点提升至渲染函数外</li><li>避免重复创建静态节点</li></ul><h5 id="patch-flag-优化" tabindex="-1">Patch Flag 优化 <a class="header-anchor" href="#patch-flag-优化" aria-label="Permalink to &quot;Patch Flag 优化&quot;">​</a></h5><ul><li>动态节点添加标记</li><li>精确更新带标记节点</li></ul><h5 id="静态树缓存" tabindex="-1">静态树缓存 <a class="header-anchor" href="#静态树缓存" aria-label="Permalink to &quot;静态树缓存&quot;">​</a></h5><ul><li>缓存静态子树</li><li>减少虚拟 DOM 创建开销</li></ul><h3 id="_2-代码组织优化" tabindex="-1">2. 代码组织优化 <a class="header-anchor" href="#_2-代码组织优化" aria-label="Permalink to &quot;2. 代码组织优化&quot;">​</a></h3><h4 id="_2-1-composition-api" tabindex="-1">2.1 Composition API <a class="header-anchor" href="#_2-1-composition-api" aria-label="Permalink to &quot;2.1 Composition API&quot;">​</a></h4><ul><li>逻辑复用更灵活</li><li>类型推导更准确</li><li>代码组织更清晰</li></ul><h4 id="_2-2-代码分割" tabindex="-1">2.2 代码分割 <a class="header-anchor" href="#_2-2-代码分割" aria-label="Permalink to &quot;2.2 代码分割&quot;">​</a></h4><ul><li>支持 Tree-shaking</li><li>优化打包体积</li></ul><h3 id="_3-开发体验提升" tabindex="-1">3. 开发体验提升 <a class="header-anchor" href="#_3-开发体验提升" aria-label="Permalink to &quot;3. 开发体验提升&quot;">​</a></h3><ul><li><strong>TypeScript 支持</strong>： <ul><li>源码完全用 TypeScript 重写</li><li>提供更好的类型推导和开发工具支持</li></ul></li><li><strong>更好的警告信息</strong>： <ul><li>组件堆栈跟踪</li><li>更详细的警告信息</li></ul></li></ul><h2 id="monorepo-项目结构" tabindex="-1">Monorepo 项目结构 <a class="header-anchor" href="#monorepo-项目结构" aria-label="Permalink to &quot;Monorepo 项目结构&quot;">​</a></h2><h3 id="什么是-monorepo" tabindex="-1">什么是 Monorepo <a class="header-anchor" href="#什么是-monorepo" aria-label="Permalink to &quot;什么是 Monorepo&quot;">​</a></h3><p>Monorepo（单体仓库）是一种项目代码管理方式，指在一个项目仓库中管理多个模块/包（package），这些模块都相互关联，共享同一套构建流程、代码规范和配置文件等。</p><h3 id="vue3-采用-monorepo-的优势" tabindex="-1">Vue3 采用 Monorepo 的优势 <a class="header-anchor" href="#vue3-采用-monorepo-的优势" aria-label="Permalink to &quot;Vue3 采用 Monorepo 的优势&quot;">​</a></h3><ol><li><p><strong>依赖管理统一化</strong></p><ul><li>统一的 package.json</li><li>避免版本冲突</li></ul></li><li><p><strong>代码共享便捷化</strong></p><ul><li>便于模块间代码共享</li><li>复用基础设施</li></ul></li><li><p><strong>提交管理原子化</strong></p><ul><li>统一代码提交</li><li>保证代码一致性</li></ul></li><li><p><strong>调试流程简单化</strong></p><ul><li>源码级别调试</li><li>依赖包直接调试</li></ul></li></ol><h3 id="核心包结构" tabindex="-1">核心包结构 <a class="header-anchor" href="#核心包结构" aria-label="Permalink to &quot;核心包结构&quot;">​</a></h3><ul><li><code>@vue/reactivity</code>: 响应式系统</li><li><code>@vue/runtime-core</code>: 平台无关运行时</li><li><code>@vue/runtime-dom</code>: 浏览器运行时</li><li><code>@vue/compiler-core</code>: 与平台无关的编译器核心</li><li><code>@vue/compiler-dom</code>: 浏览器平台的编译器</li><li><code>@vue/compiler-sfc</code>: Single File Component (<code>.vue</code> 文件) 编译器</li><li><code>@vue/shared</code>: 内部工具函数</li></ul><h3 id="工具选择" tabindex="-1">工具选择 <a class="header-anchor" href="#工具选择" aria-label="Permalink to &quot;工具选择&quot;">​</a></h3><ul><li><strong>包管理工具</strong>: pnpm <ul><li>快速依赖安装</li><li>节省磁盘空间</li><li>支持 workspace</li></ul></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">Vue 源码</a></li><li><a href="https://github.com/2xiao" target="_blank" rel="noreferrer">2xiao</a></li></ul>`,35)]))}const k=a(t,[["render",o]]);export{c as __pageData,k as default};
